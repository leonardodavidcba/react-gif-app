{"version":3,"sources":["components/AddCategorias.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategorias","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categorias","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAgB,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAkBlD,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBACAO,KAAO,OACPC,MAAUT,EACVU,SAnBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC8EC,UAAUH,GADxF,qBAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAERC,QAAQC,IAAIP,GAENQ,EAAOH,EAAKI,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAXvB,kBAgBZQ,GAhBY,4CAAH,sDCINO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOZ,EAAW,EAAXA,IAInC,OACQ,sBAAKgB,UAAW,yCAAhB,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMN,IACvB,4BAAKA,QCPRO,EAAU,SAAC,GAAoB,IAAlBrB,EAAiB,EAAjBA,WAAiB,ECAf,SAAEA,GAAiB,IAAD,EAEhBd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ6B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAqB1C,OAdAC,qBAAW,WACP1B,EAASC,GACR0B,MAAO,SAAAC,GACLC,YAAY,WACXJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEX,UAEP,CAAEtB,IAIEuB,EDnBmBM,CAAa7B,GAA/BO,EAF+B,EAE/BA,KAAMe,EAFyB,EAEzBA,QAGd,OACI,qCACA,mCAAOtB,EAAP,OACEsB,GAAW,yCAEb,qBAAKJ,UAAU,YAAf,SAGgBX,EAAKI,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAESA,GADCA,EAAIC,aEd7BiB,EAAe,WAAO,IAAD,EAEO5C,mBAAS,CAAC,eAFjB,mBAEvBc,EAFuB,KAEXf,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAeA,cAAgBA,IAC/B,uBAGA,6BAEQe,EAAWW,KAAK,SAAAX,GAAU,OACtB,cAAC,EAAD,CAEIA,WAAeA,GADPA,Y,MCdpC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.587eadb9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategorias = ( { setCategorias } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n   \n    const  handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2){\n            setCategorias( cats => [inputValue, ...cats ] );\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n            type = \"text\"\n            value = { inputValue }\n            onChange = { handleInputChange }\n            />\n        </form>\n    )\n\n}\n\nAddCategorias.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}","export const getGifs = async( categorias ) => {\n    const url =  `https://api.giphy.com/v1/gifs/search?api_key=4xJe0Fh6DzsBwkopdhI157NoAT1m8EFX&q=${ encodeURI(categorias) }&limit=5`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    console.log(url);\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n\n    return gifs;\n}","import React from 'react';\n\n \n\nexport const  GifGridItem = ( { title, url } ) => {\n\n \n\n    return (\n            <div className= \"card animate__animated animate__bounce\">\n                <img src={ url } alt={ title }/>\n                <p>{ title }</p>\n            </div>\n    )\n}\n","import React, { } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ categorias }) => {\n  \n    const { data, loading } = useFetchGifs(categorias);\n\n   \n    return (\n        <>\n        <h3> { categorias } </h3>\n        { loading && <p>Cargando</p> }\n    \n        <div className=\"card-grid\">\n                \n                    {\n                        data.map( img => (\n                            <GifGridItem \n                                key={ img.id }\n                                { ...img }\n                            />\n                        ))\n                    }\n            \n            </div> \n        \n        </>\n    )\n}","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( categorias ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( ()=> {\n        getGifs( categorias )\n        .then(  imgs => {\n           setTimeout( ()=> {\n            setState({\n                data: imgs,\n                loading: false\n            });\n           }, 2000);\n        });\n    }, [ categorias ])\n\n\n\n    return state;\n}\n","\nimport React, { useState } from 'react';\nimport { AddCategorias } from './components/AddCategorias';\nimport { GifGrid }  from './components/GifGrid';\n \nexport const GifExpertApp = () => {\n\n    const [categorias, setCategorias ] = useState(['Mia kalifa']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategorias setCategorias={ setCategorias } />\n            <hr/>\n\n         \n            <ol>\n                {\n                    categorias.map( categorias =>(\n                        <GifGrid \n                            key = { categorias }\n                            categorias = { categorias }\n                        />\n                    ) )\n                }\n            </ol>\n\n        </>\n    )\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}